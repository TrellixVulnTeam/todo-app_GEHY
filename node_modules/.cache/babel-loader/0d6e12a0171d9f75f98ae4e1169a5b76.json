{"ast":null,"code":"var _jsxFileName = \"/home/dana/my401/class31/todo-app/src/components/acl.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { AuthContext } from '../context/auth-context';\nimport If from './IF.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Acl = function (props) {\n  _s();\n\n  const context = useContext(AuthContext);\n  let okToRender = false;\n\n  try {\n    okToRender = context.loggedIn && props.capability ? context.user.capabilities.includes(props.capability) : false;\n  } catch (error) {\n    console.log('Not Authorized', error.message);\n  }\n\n  return /*#__PURE__*/_jsxDEV(If, {\n    condition: okToRender,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Acl, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\n_c = Acl;\nexport default Acl;\n\nvar _c;\n\n$RefreshReg$(_c, \"Acl\");","map":{"version":3,"sources":["/home/dana/my401/class31/todo-app/src/components/acl.jsx"],"names":["React","useContext","AuthContext","If","Acl","props","context","okToRender","loggedIn","capability","user","capabilities","includes","error","console","log","message","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,EAAP,MAAe,SAAf;;;AAEA,MAAMC,GAAG,GAAG,UAAUC,KAAV,EAAgB;AAAA;;AACxB,QAAMC,OAAO,GAAGL,UAAU,CAAEC,WAAF,CAA1B;AACI,MAAIK,UAAU,GAAG,KAAjB;;AACA,MAAI;AACAA,IAAAA,UAAU,GAAGD,OAAO,CAACE,QAAR,IACNH,KAAK,CAACI,UADA,GAEPH,OAAO,CAACI,IAAR,CAAaC,YAAb,CAA0BC,QAA1B,CAAmCP,KAAK,CAACI,UAAzC,CAFO,GAGP,KAHN;AAIH,GALD,CAKE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,KAAK,CAACG,OAApC;AACH;;AAED,sBACI,QAAC,EAAD;AAAI,IAAA,SAAS,EAAET,UAAf;AAAA,cACKF,KAAK,CAACY;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAMP,CAlBD;;GAAMb,G;;KAAAA,G;AAmBN,eAAeA,GAAf","sourcesContent":["import React , {useContext} from 'react';\nimport { AuthContext } from '../context/auth-context';\nimport If from './IF.js';\n\nconst Acl = function (props){\n    const context = useContext (AuthContext);\n        let okToRender = false;\n        try {\n            okToRender = context.loggedIn \n                && props.capability\n                ? context.user.capabilities.includes(props.capability)\n                : false;\n        } catch (error) {\n            console.log('Not Authorized', error.message);\n        }\n\n        return (\n            <If condition={okToRender}>\n                {props.children}\n            </If>\n        )\n    \n}\nexport default Acl;"]},"metadata":{},"sourceType":"module"}