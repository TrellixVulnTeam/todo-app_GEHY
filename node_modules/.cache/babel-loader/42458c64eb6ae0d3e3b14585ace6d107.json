{"ast":null,"code":"var _jsxFileName = \"/home/dana/my401/class31/todo-app/src/context/auth-context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport jwt from 'jsonwebtoken';\nimport cookie from 'react-cookies';\nimport base64 from 'base-64';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet todoAPI = 'https://auth-server-401.herokuapp.com/';\nexport const AuthContext = /*#__PURE__*/React.createContext();\n\nfunction AuthProvider(props) {\n  _s();\n\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [user, setUser] = useState({});\n  const [token, setToken] = useState(null);\n  const [show, setShow] = useState(false);\n\n  const signUp = async function (username, password, role) {\n    let url = `${todoAPI}/signup`;\n    let body = {\n      username,\n      password,\n      role\n    };\n    let result = await fetch(url, {\n      method: 'post',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    let user = await result.json();\n    console.log(`you successfully registered ${user.user.username} , ${user.user.acl.role} with a password of ${user.password} and token is ${user.token}`, user);\n  };\n\n  const signIn = async function (username, password) {\n    const encoded = base64.encode(`${username}:${password}`);\n    const result = await fetch(`${todoAPI}/signin`, {\n      method: 'post',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {\n        Authorization: `Basic ${encoded}`\n      }\n    });\n    let data = await result.json();\n    console.log(`you logged in successfully ${data.user.username}`, data);\n    tokenValidator(data.token);\n  };\n\n  const tokenValidator = function (token) {\n    try {\n      let user = jwt.decode(token);\n\n      if (user) {\n        isLoggedIn(!!user, token, user);\n      }\n    } catch (error) {\n      isLoggedIn(false, null, {});\n    }\n  };\n\n  const isLoggedIn = function (loggedIn, token, user) {\n    cookie.save('auth', token);\n    setLoggedIn(loggedIn);\n    setUser(user);\n    setToken(token);\n  };\n\n  const signOut = function () {\n    setLoggedIn(false);\n    setUser({});\n    setToken(null);\n    cookie.remove('auth');\n    console.log(`you logged out , please visit again soon`);\n  };\n\n  const handleClose = function (e) {\n    setShow(false);\n  };\n\n  const handleShow = function (e) {\n    e.preventDefault();\n    setShow(true);\n  };\n\n  const state = {\n    loggedIn,\n    setLoggedIn,\n    user,\n    setUser,\n    signUp,\n    signIn,\n    signOut,\n    token,\n    setToken,\n    show,\n    setShow,\n    handleClose,\n    handleShow\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: state,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AuthProvider, \"UMWrBEwNxTbAGHf7k9VZOh0kSxE=\");\n\n_c = AuthProvider;\nexport default AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/dana/my401/class31/todo-app/src/context/auth-context.jsx"],"names":["React","useState","jwt","cookie","base64","todoAPI","AuthContext","createContext","AuthProvider","props","loggedIn","setLoggedIn","user","setUser","token","setToken","show","setShow","signUp","username","password","role","url","body","result","fetch","method","mode","cache","headers","JSON","stringify","json","console","log","acl","signIn","encoded","encode","Authorization","data","tokenValidator","decode","isLoggedIn","error","save","signOut","remove","handleClose","e","handleShow","preventDefault","state","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport jwt from 'jsonwebtoken';\nimport cookie from 'react-cookies';\nimport base64 from 'base-64';\n\nlet todoAPI = 'https://auth-server-401.herokuapp.com/';\n\nexport const AuthContext = React.createContext();\n\nfunction AuthProvider(props) {\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [user, setUser] = useState({});\n  const [token, setToken] = useState(null);\n\n  const [show, setShow] = useState(false);\n\n  const signUp = async function (username, password, role) {\n    let url = `${todoAPI}/signup`;\n    let body = {\n      username,\n      password,\n      role,\n    };\n    let result = await fetch(url, {\n      method: 'post',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body),\n    });\n\n    let user = await result.json();\n    console.log(\n      `you successfully registered ${user.user.username} , ${user.user.acl.role} with a password of ${user.password} and token is ${user.token}`,\n      user\n    );\n  };\n\n  const signIn = async function (username, password) {\n    const encoded = base64.encode(`${username}:${password}`);\n    const result = await fetch(`${todoAPI}/signin`, {\n      method: 'post',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: { Authorization: `Basic ${encoded}` },\n    });\n    let data = await result.json();\n    console.log(`you logged in successfully ${data.user.username}`, data);\n    tokenValidator(data.token);\n  };\n\n  const tokenValidator = function (token) {\n    try {\n      let user = jwt.decode(token);\n      if (user) {\n        isLoggedIn(!!user, token, user);\n      }\n    } catch (error) {\n      isLoggedIn(false, null, {});\n    }\n  };\n\n  const isLoggedIn = function (loggedIn, token, user) {\n    cookie.save('auth', token);\n    setLoggedIn(loggedIn);\n    setUser(user);\n    setToken(token);\n  };\n\n  const signOut = function () {\n    setLoggedIn(false);\n    setUser({});\n    setToken(null);\n    cookie.remove('auth');\n    console.log(`you logged out , please visit again soon`);\n  };\n\n  const handleClose = function (e) {\n    setShow(false);\n  };\n  const handleShow = function (e) {\n    e.preventDefault();\n    setShow(true);\n  };\n\n  const state = {\n    loggedIn,\n    setLoggedIn,\n\n    user,\n    setUser,\n\n    signUp,\n    signIn,\n    signOut,\n\n    token,\n    setToken,\n\n    show,\n    setShow,\n\n    handleClose,\n    handleShow,\n  };\n\n  return (\n    <AuthContext.Provider value={state}>{props.children}</AuthContext.Provider>\n  );\n}\n\nexport default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}