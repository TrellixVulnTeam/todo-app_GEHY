{"ast":null,"code":"var _jsxFileName = \"/home/dana/my401/class31/todo-app/src/components/todo/list.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useContext } from 'react';\nimport { SettingsContext } from '../../context/setting';\nimport { useState, useEffect } from 'react';\nimport { Button, Card, Elevation } from '@blueprintjs/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction List(props) {\n  _s();\n\n  const context = useContext(SettingsContext);\n  let currentList = props.list;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [activeList, setActiveList] = useState(props.list.slice(0, context.itemsPerPage));\n  const [numOfPages, setNumOfPages] = useState(Math.ceil(props.list.length / context.itemsPerPage)); //============sorting==================\\\\\n\n  if (context.sortField === 'assignee') {\n    currentList.sort((a, b) => {\n      if (a.assignee.toLowerCase() > b.assignee.toLowerCase()) return 1;\n      if (a.assignee.toLowerCase() < b.assignee.toLowerCase()) return -1;\n      return 0;\n    });\n  } else if (context.sortField === 'difficulty') {\n    currentList.sort((a, b) => {\n      return a.difficulty - b.difficulty;\n    });\n  } else if (context.sortField === 'task') {\n    currentList.sort((a, b) => {\n      if (a.text.toLowerCase() > b.text.toLowerCase()) return 1;\n      if (a.text.toLowerCase() < b.text.toLowerCase()) return -1;\n      return 0;\n    });\n  }\n\n  useEffect(() => {\n    setActiveList(props.list.slice(0, context.itemsPerPage));\n    setNumOfPages(Math.ceil(props.list.length / context.itemsPerPage));\n  }, [props.list, context.itemsPerPage]);\n  useEffect(() => {\n    const start = (currentPage - 1) * context.itemsPerPage;\n    const end = start + context.itemsPerPage;\n    setActiveList(props.list.slice(start, end));\n  }, [currentPage, context.itemsPerPage, props.list]);\n\n  const PagesList = () => {\n    const pages = [];\n    if (currentPage > 1) pages.push( /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => {\n        changePage(currentPage - 1);\n      },\n      children: \"Prev\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this));\n\n    for (let index = 0; index < numOfPages; index++) {\n      pages.push( /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          changePage(index);\n        },\n        children: index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this));\n    }\n\n    if (currentPage < numOfPages) pages.push( /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => {\n        changePage(currentPage + 1);\n      },\n      children: \"next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this));\n    return pages;\n  }; ///////////////////////////show\n\n\n  if (context.hideComplete) {\n    useEffect(() => {\n      setActiveList(props.list.filter(item => !item.complete));\n    }, [props.list, context.itemsPerPage, context.hideComplete]);\n  }\n\n  const changePage = pageNumber => {\n    if (pageNumber == currentPage) return;\n    setCurrentPage(pageNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: context.hideComplete === true ? 'success' : 'secondary',\n      onClick: () => context.setHideComplete(!context.hideComplete),\n      children: context.hideComplete === true ? `Show Completed Tasks` : `Hide Completed Tasks`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"sortDropDown\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        id: \"sortLabel\",\n        htmlFor: \"sortby\",\n        children: \"Sort By:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"sortSelect\",\n        name: \"sortby\",\n        onChange: e => context.setSortField(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"assignee\",\n          children: \"Assignee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"difficulty\",\n          children: \"Difficulty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"task\",\n          children: \"Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      id: \"cardBody\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n        id: \"taskText\",\n        className: `complete-${item.complete.toString()}`,\n        onClick: () => toggleUpdate(item._id),\n        children: item.text\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        id: \"diff\",\n        className: \"text-sm-right\",\n        children: [\"Difficulty: \", item.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }, this), activeList.map(item => /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Assigned to: \", item.assignee]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Difficulty: \", item.difficulty]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => props.toggleComplete(item.id),\n        children: [\"Complete: \", item.complete.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(PagesList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(List, \"MZFnnqSzuROQ7pTAxdZrZtEc/4s=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/dana/my401/class31/todo-app/src/components/todo/list.js"],"names":["React","useContext","SettingsContext","useState","useEffect","Button","Card","Elevation","List","props","context","currentList","list","currentPage","setCurrentPage","activeList","setActiveList","slice","itemsPerPage","numOfPages","setNumOfPages","Math","ceil","length","sortField","sort","a","b","assignee","toLowerCase","difficulty","text","start","end","PagesList","pages","push","changePage","index","hideComplete","filter","item","complete","pageNumber","setHideComplete","e","setSortField","target","value","toString","toggleUpdate","_id","id","map","toggleComplete"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useContext } from 'react';\nimport { SettingsContext } from '../../context/setting';\nimport { useState, useEffect } from 'react';\nimport { Button, Card, Elevation } from '@blueprintjs/core';\n\nfunction List(props) {\n  const context = useContext(SettingsContext);\n  let currentList = props.list;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [activeList, setActiveList] = useState(\n    props.list.slice(0, context.itemsPerPage)\n  );\n  const [numOfPages, setNumOfPages] = useState(\n    Math.ceil(props.list.length / context.itemsPerPage)\n  );\n  //============sorting==================\\\\\n  if (context.sortField === 'assignee') {\n    currentList.sort((a, b) => {\n      if (a.assignee.toLowerCase() > b.assignee.toLowerCase()) return 1;\n      if (a.assignee.toLowerCase() < b.assignee.toLowerCase()) return -1;\n      return 0;\n    });\n  }\n  else if (context.sortField === 'difficulty') {\n    currentList.sort((a, b) => {\n      return a.difficulty - b.difficulty;\n    });\n  }\n  else if (context.sortField === 'task') {\n    currentList.sort((a, b) => {\n      if (a.text.toLowerCase() > b.text.toLowerCase()) return 1;\n      if (a.text.toLowerCase() < b.text.toLowerCase()) return -1;\n      return 0;\n    });\n  }\n\n  useEffect(() => {\n    setActiveList(props.list.slice(0, context.itemsPerPage));\n    setNumOfPages(Math.ceil(props.list.length / context.itemsPerPage));\n  }, [props.list, context.itemsPerPage]);\n\n  useEffect(() => {\n    const start = (currentPage - 1) * context.itemsPerPage;\n    const end = start + context.itemsPerPage;\n    setActiveList(props.list.slice(start, end));\n  }, [currentPage, context.itemsPerPage, props.list]);\n\n\n  const PagesList = () => {\n    const pages = [];\n    if (currentPage > 1)\n      pages.push(\n        <Button\n          onClick={() => {\n            changePage(currentPage - 1);\n          }}\n        >\n          Prev\n        </Button>\n      );\n\n    for (let index = 0; index < numOfPages; index++) {\n      pages.push(\n        <Button\n          onClick={() => {\n            changePage(index);\n          }}\n          key={index}\n        >\n          {index}\n        </Button>\n      );\n    }\n\n    if (currentPage < numOfPages)\n      pages.push(\n        <Button\n          onClick={() => {\n            changePage(currentPage + 1);\n          }}\n        >\n          next\n        </Button>\n      );\n    return pages;\n  };\n\n\n\n\n ///////////////////////////show\n  if (context.hideComplete) {\n    useEffect(() => {\n    setActiveList(props.list.filter(item => !item.complete));\n  },[props.list, context.itemsPerPage ,context.hideComplete]);}\n\n\n\n\n\n  const changePage = (pageNumber) => {\n    if (pageNumber == currentPage) return;\n    setCurrentPage(pageNumber);\n  };\n\n  return (\n    <>\n      <Button\n           \n            variant={context.hideComplete === true ? 'success' : 'secondary'}\n            onClick={() => context.setHideComplete(!context.hideComplete)}>\n              {context.hideComplete === true ? `Show Completed Tasks` : `Hide Completed Tasks`}\n          </Button>\n        <div id=\"sortDropDown\">\n            <label id=\"sortLabel\" htmlFor=\"sortby\">Sort By:</label>\n            <select id=\"sortSelect\" name=\"sortby\" onChange={e => context.setSortField(e.target.value)}>\n              <option value=\"assignee\">Assignee</option>\n              <option value=\"difficulty\">Difficulty</option>\n              <option value=\"task\">Task</option>\n            </select>\n          </div>\n          <Card.Body id=\"cardBody\">\n              <Card.Text\n              id=\"taskText\"\n              className={`complete-${item.complete.toString()}`}\n              key={item.id}\n              onClick={() => toggleUpdate(item._id)}\n              >\n                {item.text}\n              </Card.Text>\n              <Card.Text id=\"diff\" className=\"text-sm-right\">\n                Difficulty: {item.difficulty}\n              </Card.Text>\n            </Card.Body>\n      {activeList.map((item) => (\n        <Card key={item.id}>\n          <p>{item.text}</p>\n          <p>\n            <small>Assigned to: {item.assignee}</small>\n          </p>\n          <p>\n            <small>Difficulty: {item.difficulty}</small>\n          </p>\n          <div onClick={() => props.toggleComplete(item.id)}>\n            Complete: {item.complete.toString()}\n          </div>\n          <hr />\n        </Card>\n      ))}\n      <PagesList />\n    </>\n  );\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}