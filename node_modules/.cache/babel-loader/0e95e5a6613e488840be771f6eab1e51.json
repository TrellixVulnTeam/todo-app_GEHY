{"ast":null,"code":"var _jsxFileName = \"/home/dana/my401/class31/todo-app/src/components/todo/list.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useContext } from 'react';\nimport { SettingContext } from '../../context/setting';\nimport { useState } from 'react';\nimport { If, Else, Then } from 'react-if';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction List(props) {\n  _s();\n\n  const context = useContext(SettingContext); // const [value, setValue] = useState('');\n  // const [id, setId] = useState('');\n  // const [update, setUpdate] = useState(false);\n  // const [handleSubmit, values] = useHook(updateList);\n  // const [complete, setComplete] = useState('');\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [activeList, setActiveList] = useState(props.list.slice(0, context.itemsPerPage));\n  const [numOfPages, setNumOfPages] = useState(Math.ceil(props.list.length / context.itemsPerPage));\n  useEffect(() => {\n    setCurrentPage(props.list.slice(0, context.itemsPerPage));\n    setNumOfPages(Math.ceil(props.list.length / context.itemsPerPage));\n  }, [props.list]);\n  useEffect(() => {\n    const start = (currentPage - 1) * context.itemsPerPage;\n    const end = start + context.itemsPerPage;\n    setActiveList(props.list.slice(start, end));\n  }, [currentPage]);\n\n  const PagesList = () => {\n    const pages = [];\n\n    for (let index = 0; index < numOfPages; index++) {\n      pages.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          changePage(i);\n        },\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this));\n    }\n\n    return pages;\n  };\n\n  const changePage = pageNumber => {\n    if (pageNumber == currentPage) return;\n    setCurrentPage(pageNumber);\n  };\n\n  return props.list.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: item.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Assigned to: \", item.assignee]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Difficulty: \", item.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => props.toggleComplete(item.id),\n      children: [\"Complete: \", item.complete.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, item.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this));\n}\n\n_s(List, \"MbfoMhNnvfdI8urph2ySv0XMTrs=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/dana/my401/class31/todo-app/src/components/todo/list.js"],"names":["React","useContext","SettingContext","useState","If","Else","Then","List","props","context","currentPage","setCurrentPage","activeList","setActiveList","list","slice","itemsPerPage","numOfPages","setNumOfPages","Math","ceil","length","useEffect","start","end","PagesList","pages","index","push","changePage","i","pageNumber","map","item","text","assignee","difficulty","toggleComplete","id","complete","toString"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,EAAT,EAAYC,IAAZ,EAAiBC,IAAjB,QAA6B,UAA7B;;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACnB,QAAMC,OAAO,GAAGR,UAAU,CAACC,cAAD,CAA1B,CADmB,CAGnB;AACA;AACA;AACA;AACA;;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAC1CK,KAAK,CAACM,IAAN,CAAWC,KAAX,CAAiB,CAAjB,EAAoBN,OAAO,CAACO,YAA5B,CAD0C,CAA5C;AAGA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAC1CgB,IAAI,CAACC,IAAL,CAAUZ,KAAK,CAACM,IAAN,CAAWO,MAAX,GAAoBZ,OAAO,CAACO,YAAtC,CAD0C,CAA5C;AAIAM,EAAAA,SAAS,CAAC,MAAM;AACdX,IAAAA,cAAc,CAACH,KAAK,CAACM,IAAN,CAAWC,KAAX,CAAiB,CAAjB,EAAoBN,OAAO,CAACO,YAA5B,CAAD,CAAd;AACAE,IAAAA,aAAa,CAACC,IAAI,CAACC,IAAL,CAAUZ,KAAK,CAACM,IAAN,CAAWO,MAAX,GAAoBZ,OAAO,CAACO,YAAtC,CAAD,CAAb;AACD,GAHQ,EAGN,CAACR,KAAK,CAACM,IAAP,CAHM,CAAT;AAKAQ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMC,KAAK,GAAG,CAACb,WAAW,GAAG,CAAf,IAAoBD,OAAO,CAACO,YAA1C;AACA,UAAMQ,GAAG,GAAGD,KAAK,GAAGd,OAAO,CAACO,YAA5B;AACAH,IAAAA,aAAa,CAACL,KAAK,CAACM,IAAN,CAAWC,KAAX,CAAiBQ,KAAjB,EAAwBC,GAAxB,CAAD,CAAb;AACD,GAJQ,EAIN,CAACd,WAAD,CAJM,CAAT;;AAMA,QAAMe,SAAS,GAAG,MAAM;AACtB,UAAMC,KAAK,GAAG,EAAd;;AAEA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,UAA5B,EAAwCU,KAAK,EAA7C,EAAiD;AAC/CD,MAAAA,KAAK,CAACE,IAAN,eACE;AACE,QAAA,OAAO,EAAE,MAAM;AACbC,UAAAA,UAAU,CAACC,CAAD,CAAV;AACD,SAHH;AAAA,kBAMGA;AANH,SAIOA,CAJP;AAAA;AAAA;AAAA;AAAA,cADF;AAUD;;AACD,WAAOJ,KAAP;AACD,GAhBD;;AAiBA,QAAMG,UAAU,GAAIE,UAAD,IAAgB;AACjC,QAAIA,UAAU,IAAIrB,WAAlB,EAA+B;AAC/BC,IAAAA,cAAc,CAACoB,UAAD,CAAd;AACD,GAHD;;AAKA,SAAOvB,KAAK,CAACM,IAAN,CAAWkB,GAAX,CAAgBC,IAAD,iBACpB;AAAA,4BACE;AAAA,gBAAIA,IAAI,CAACC;AAAT;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAA,oCAAqBD,IAAI,CAACE,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAA,6BACE;AAAA,mCAAoBF,IAAI,CAACG,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF,eAQE;AAAK,MAAA,OAAO,EAAE,MAAM5B,KAAK,CAAC6B,cAAN,CAAqBJ,IAAI,CAACK,EAA1B,CAApB;AAAA,+BACaL,IAAI,CAACM,QAAL,CAAcC,QAAd,EADb;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,eAWE;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA,KAAUP,IAAI,CAACK,EAAf;AAAA;AAAA;AAAA;AAAA,UADK,CAAP;AAeD;;GAhEQ/B,I;;KAAAA,I;AAiET,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport { useContext } from 'react';\nimport { SettingContext } from '../../context/setting';\nimport { useState } from 'react';\nimport { If,Else,Then } from 'react-if';\n\n\nfunction List(props) {\n  const context = useContext(SettingContext);\n\n  // const [value, setValue] = useState('');\n  // const [id, setId] = useState('');\n  // const [update, setUpdate] = useState(false);\n  // const [handleSubmit, values] = useHook(updateList);\n  // const [complete, setComplete] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [activeList, setActiveList] = useState(\n    props.list.slice(0, context.itemsPerPage)\n  );\n  const [numOfPages, setNumOfPages] = useState(\n    Math.ceil(props.list.length / context.itemsPerPage)\n  );\n\n  useEffect(() => {\n    setCurrentPage(props.list.slice(0, context.itemsPerPage));\n    setNumOfPages(Math.ceil(props.list.length / context.itemsPerPage));\n  }, [props.list]);\n\n  useEffect(() => {\n    const start = (currentPage - 1) * context.itemsPerPage;\n    const end = start + context.itemsPerPage;\n    setActiveList(props.list.slice(start, end));\n  }, [currentPage]);\n\n  const PagesList = () => {\n    const pages = [];\n    \n    for (let index = 0; index < numOfPages; index++) {\n      pages.push(\n        <button\n          onClick={() => {\n            changePage(i);\n          }}\n          key={i}\n        >\n          {i}\n        </button>\n      );\n    }\n    return pages;\n  };\n  const changePage = (pageNumber) => {\n    if (pageNumber == currentPage) return;\n    setCurrentPage(pageNumber);\n  };\n\n  return props.list.map((item) => (\n    <div key={item.id}>\n      <p>{item.text}</p>\n      <p>\n        <small>Assigned to: {item.assignee}</small>\n      </p>\n      <p>\n        <small>Difficulty: {item.difficulty}</small>\n      </p>\n      <div onClick={() => props.toggleComplete(item.id)}>\n        Complete: {item.complete.toString()}\n      </div>\n      <hr />\n    </div>\n  ));\n}\nexport default List;\n"]},"metadata":{},"sourceType":"module"}