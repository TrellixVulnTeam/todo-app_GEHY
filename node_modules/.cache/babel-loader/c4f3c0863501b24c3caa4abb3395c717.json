{"ast":null,"code":"var _jsxFileName = \"/home/dana/my401/class31/todo-app/src/context/auth-context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport jwt from 'jsonwebtoken';\nimport cookie from 'react-cookies';\nimport base64 from 'base-64';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet todoAPI = 'https://auth-server-401.herokuapp.com/';\nexport const AuthContext = /*#__PURE__*/React.createContext();\n\nfunction AuthProvider(props) {\n  _s();\n\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [user, setUser] = useState({});\n  const [token, setToken] = useState(null);\n  const [show, setShow] = useState(false);\n\n  const signUp = async function (username, password, role) {\n    let url = `${todoAPI}/signup`;\n    let body = {\n      username,\n      password,\n      role\n    };\n    let result = await fetch(url, {\n      method: 'post',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    let user = await result.json();\n    console.log(`you successfully registered ${user.user.username} , ${user.user.acl.role} with a password of ${user.password} and token is ${user.token}`, user);\n  };\n\n  const signIn = async function (username, password) {\n    const encoded = base64.encode(`${username}:${password}`);\n    const result = await fetch(`${todoAPI}/signin`, {\n      method: 'post',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {\n        Authorization: `Basic ${encoded}`\n      }\n    });\n    let data = await result.json();\n    console.log(`you logged in successfully ${data.user.username}`, data);\n    tokenValidator(data.token);\n  };\n\n  const tokenValidator = function (token) {\n    try {\n      let user = jwt.decode(token);\n\n      if (user) {\n        isLoggedIn(!!user, token, user);\n      }\n    } catch (error) {\n      isLoggedIn(false, null, {});\n    }\n  };\n\n  const isLoggedIn = function (loggedIn, token, user) {\n    cookie.save('auth', token);\n    setLoggedIn(loggedIn);\n    setUser(user);\n    setToken(token);\n  };\n\n  const signOut = function () {\n    setLoggedIn(false);\n    setUser({});\n    setToken(null);\n    cookie.remove('auth');\n    console.log(`you logged out , please visit again soon`);\n  };\n\n  const handleClose = function (e) {\n    setShow(false);\n  };\n\n  const handleShow = function (e) {\n    e.preventDefault();\n    setShow(true);\n  };\n\n  const state = {\n    loggedIn,\n    setLoggedIn,\n    user,\n    setUser,\n    signUp,\n    signIn,\n    signOut,\n    token,\n    setToken,\n    show,\n    setShow,\n    handleClose,\n    handleShow\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: state,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthProvider, \"hxw82EOHahkd35ruxjrWCZjvcpk=\");\n\n_c = AuthProvider;\nexport default AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/dana/my401/class31/todo-app/src/context/auth-context.jsx"],"names":["React","useState","jwt","cookie","base64","todoAPI","AuthContext","createContext","AuthProvider","props","loggedIn","setLoggedIn","user","setUser","token","setToken","show","setShow","signUp","username","password","role","url","body","result","fetch","method","mode","cache","headers","JSON","stringify","json","console","log","acl","signIn","encoded","encode","Authorization","data","tokenValidator","decode","isLoggedIn","error","save","signOut","remove","handleClose","e","handleShow","preventDefault","state","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA8B,OAA9B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,MAAP,MAAmB,SAAnB;;AAGA,IAAIC,OAAO,GAAG,wCAAd;AAEA,OAAO,MAAMC,WAAW,gBAAGN,KAAK,CAACO,aAAN,EAApB;;AAEP,SAASC,YAAT,CAAuBC,KAAvB,EAA6B;AAAA;;AACzB,QAAM,CAACC,QAAD,EAAYC,WAAZ,IAA2BV,QAAQ,CAAE,KAAF,CAAzC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,KAAD,EAASC,QAAT,IAAqBd,QAAQ,CAAE,IAAF,CAAnC;AAEA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMiB,MAAM,GAAG,gBAAgBC,QAAhB,EAA2BC,QAA3B,EAAsCC,IAAtC,EAA2C;AACtD,QAAIC,GAAG,GAAI,GAAEjB,OAAQ,SAArB;AACA,QAAIkB,IAAI,GAAG;AACPJ,MAAAA,QADO;AACIC,MAAAA,QADJ;AACeC,MAAAA;AADf,KAAX;AAGA,QAAIG,MAAM,GAAG,MAAMC,KAAK,CAAEH,GAAF,EAAQ;AAC5BI,MAAAA,MAAM,EAAE,MADoB;AAE5BC,MAAAA,IAAI,EAAE,MAFsB;AAG5BC,MAAAA,KAAK,EAAE,UAHqB;AAI5BC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAJmB;AAK5BN,MAAAA,IAAI,EAAEO,IAAI,CAACC,SAAL,CAAeR,IAAf;AALsB,KAAR,CAAxB;AASA,QAAIX,IAAI,GAAG,MAAMY,MAAM,CAACQ,IAAP,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAc,+BAA8BtB,IAAI,CAACA,IAAL,CAAUO,QAAS,MAAKP,IAAI,CAACA,IAAL,CAAUuB,GAAV,CAAcd,IAAK,uBAAsBT,IAAI,CAACQ,QAAS,iBAAgBR,IAAI,CAACE,KAAM,EAAtJ,EAA0JF,IAA1J;AAEH,GAjBD;;AAmBA,QAAMwB,MAAM,GAAG,gBAAgBjB,QAAhB,EAA2BC,QAA3B,EAAqC;AAChD,UAAMiB,OAAO,GAAGjC,MAAM,CAACkC,MAAP,CAAgB,GAAEnB,QAAS,IAAGC,QAAS,EAAvC,CAAhB;AACA,UAAMI,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAEpB,OAAQ,SAAZ,EAAuB;AAC7CqB,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,IAAI,EAAE,MAFuC;AAG7CC,MAAAA,KAAK,EAAE,UAHsC;AAI7CC,MAAAA,OAAO,EAAE;AAACU,QAAAA,aAAa,EAAG,SAAQF,OAAQ;AAAjC;AAJoC,KAAvB,CAA1B;AAMA,QAAIG,IAAI,GAAG,MAAMhB,MAAM,CAACQ,IAAP,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAc,8BAA6BM,IAAI,CAAC5B,IAAL,CAAUO,QAAS,EAA9D,EAAkEqB,IAAlE;AACAC,IAAAA,cAAc,CAAED,IAAI,CAAC1B,KAAP,CAAd;AACH,GAXD;;AAaA,QAAM2B,cAAc,GAAG,UAAU3B,KAAV,EAAgB;AACnC,QAAI;AACA,UAAIF,IAAI,GAAGV,GAAG,CAACwC,MAAJ,CAAW5B,KAAX,CAAX;;AACA,UAAIF,IAAJ,EAAS;AACN+B,QAAAA,UAAU,CAAG,CAAC,CAAC/B,IAAL,EAAYE,KAAZ,EAAoBF,IAApB,CAAV;AACF;AACJ,KALD,CAKE,OAAOgC,KAAP,EAAc;AACZD,MAAAA,UAAU,CAAG,KAAH,EAAU,IAAV,EAAgB,EAAhB,CAAV;AACH;AAEJ,GAVD;;AAYA,QAAMA,UAAU,GAAG,UAAWjC,QAAX,EAAsBI,KAAtB,EAA6BF,IAA7B,EAAmC;AAClDT,IAAAA,MAAM,CAAC0C,IAAP,CAAY,MAAZ,EAAoB/B,KAApB;AACAH,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,QAAQ,CAAED,KAAF,CAAR;AACH,GALD;;AAOA,QAAMgC,OAAO,GAAG,YAAY;AACxBnC,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,QAAQ,CAAE,IAAF,CAAR;AACAZ,IAAAA,MAAM,CAAC4C,MAAP,CAAc,MAAd;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAc,0CAAd;AACH,GAND;;AASA,QAAMc,WAAW,GAAG,UAAUC,CAAV,EAAa;AAE7BhC,IAAAA,OAAO,CAAC,KAAD,CAAP;AACH,GAHD;;AAIA,QAAMiC,UAAU,GAAI,UAAUD,CAAV,EAAa;AAC7BA,IAAAA,CAAC,CAACE,cAAF;AACAlC,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAHD;;AAKA,QAAMmC,KAAK,GAAG;AACV1C,IAAAA,QADU;AAEVC,IAAAA,WAFU;AAIVC,IAAAA,IAJU;AAKVC,IAAAA,OALU;AAOVK,IAAAA,MAPU;AAQVkB,IAAAA,MARU;AASVU,IAAAA,OATU;AAWVhC,IAAAA,KAXU;AAYVC,IAAAA,QAZU;AAcVC,IAAAA,IAdU;AAeVC,IAAAA,OAfU;AAiBV+B,IAAAA,WAjBU;AAkBVE,IAAAA;AAlBU,GAAd;AAqBA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,KAA7B;AAAA,cACK3C,KAAK,CAAC4C;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAvGQ7C,Y;;KAAAA,Y;AAyGT,eAAeA,YAAf","sourcesContent":["import React , {useState}from 'react';\nimport jwt from 'jsonwebtoken';\nimport cookie from 'react-cookies';\nimport base64 from 'base-64';\n\n\nlet todoAPI = 'https://auth-server-401.herokuapp.com/';\n\nexport const AuthContext = React.createContext();\n\nfunction AuthProvider (props){\n    const [loggedIn , setLoggedIn] = useState (false);\n    const [user, setUser] = useState({})\n    const [token , setToken] = useState (null);\n\n    const [show, setShow] = useState(false);\n\n    const signUp = async function (username , password , role){\n        let url = `${todoAPI}/signup`\n        let body = {\n            username , password , role\n        }\n        let result = await fetch (url , {\n            method: 'post',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n           \n        })\n\n        let user = await result.json()\n        console.log (`you successfully registered ${user.user.username} , ${user.user.acl.role} with a password of ${user.password} and token is ${user.token}` , user);\n\n    } \n\n    const signIn = async function (username , password) {\n        const encoded = base64.encode (`${username}:${password}`);\n        const result = await fetch(`${todoAPI}/signin` , {\n            method: 'post',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {Authorization: `Basic ${encoded}`},\n        })\n        let data = await result.json();\n        console.log (`you logged in successfully ${data.user.username}` , data);\n        tokenValidator (data.token)\n    }\n\n    const tokenValidator = function (token){\n        try {\n            let user = jwt.decode(token)\n            if (user){\n               isLoggedIn ( !!user , token , user) \n            }  \n        } catch (error) {\n            isLoggedIn ( false, null, {}) \n        }\n        \n    }\n\n    const isLoggedIn = function ( loggedIn , token, user) {\n        cookie.save('auth', token );\n        setLoggedIn(loggedIn)\n        setUser(user)\n        setToken (token)\n    }\n\n    const signOut = function () {\n        setLoggedIn(false)\n        setUser({})\n        setToken (null)\n        cookie.remove('auth');\n        console.log (`you logged out , please visit again soon`)\n    }\n\n\n    const handleClose = function (e) { \n        \n        setShow(false)\n    };\n    const handleShow  = function (e) { \n        e.preventDefault()\n        setShow(true) \n    };\n\n    const state = {\n        loggedIn ,\n        setLoggedIn ,\n         \n        user,\n        setUser,\n\n        signUp,\n        signIn,\n        signOut,\n\n        token,\n        setToken,\n\n        show,\n        setShow,\n\n        handleClose,\n        handleShow\n    }\n\n    return (\n        <AuthContext.Provider value={state}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n\n}\n\nexport default AuthProvider;"]},"metadata":{},"sourceType":"module"}