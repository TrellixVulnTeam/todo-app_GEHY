{"ast":null,"code":"var _jsxFileName = \"/home/dana/my401/class31/todo-app/src/components/todo/list.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { SettingContext } from '../../context/setteing';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction List(props) {\n  _s();\n\n  const context = useContext(SettingContext); // const [value, setValue] = useState('');\n  // const [id, setId] = useState('');\n  // const [update, setUpdate] = useState(false);\n  // const [handleSubmit, values] = useHook(updateList);\n  // const [complete, setComplete] = useState('');\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [activeList, setActiveList] = useState(props.list.slice(0, context.itemsPerPage));\n  const [numOfPages, setNumOfPages] = useState(Math.ceil(props.list.length / context.itemsPerPage));\n  useEffect(() => {\n    setCurrentPage(props.list.slice(0, context.itemsPerPage));\n    setNumOfPages(Math.ceil(props.list.length / context.itemsPerPage));\n  }, [props.list]);\n  useEffect(() => {\n    const start = (currentPage - 1) * context.itemsPerPage;\n    const end = start + context.itemsPerPage;\n    setActiveList(props.list.slice(start, end));\n  }, [currentPage]);\n\n  const PagesList = () => {\n    const pages = [];\n    console.log(numOfPages);\n\n    for (let index = 0; index < numOfPages; index++) {\n      pages.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          changePage(i);\n        },\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 16\n      }, this));\n    }\n\n    ret;\n  };\n\n  return props.list.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: item.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Assigned to: \", item.assignee]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Difficulty: \", item.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => props.toggleComplete(item.id),\n      children: [\"Complete: \", item.complete.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }, this)]\n  }, item.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 13\n  }, this));\n}\n\n_s(List, \"97aiyCfaD8khCvYrQwsFMm0IVsU=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/dana/my401/class31/todo-app/src/components/todo/list.js"],"names":["React","SettingContext","List","props","context","useContext","currentPage","setCurrentPage","useState","activeList","setActiveList","list","slice","itemsPerPage","numOfPages","setNumOfPages","Math","ceil","length","useEffect","start","end","PagesList","pages","console","log","index","push","changePage","i","ret","map","item","text","assignee","difficulty","toggleComplete","id","complete","toString"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { SettingContext } from '../../context/setteing';\nfunction List(props) {\n\n    const context = useContext(SettingContext);\n\n    // const [value, setValue] = useState('');\n    // const [id, setId] = useState('');\n    // const [update, setUpdate] = useState(false);\n    // const [handleSubmit, values] = useHook(updateList);\n    // const [complete, setComplete] = useState('');\n    const [currentPage, setCurrentPage] = useState(1);\n   const [activeList, setActiveList] = useState(props.list.slice(0,context.itemsPerPage));\n   const [numOfPages, setNumOfPages] = useState(Math.ceil(props.list.length / context.itemsPerPage));\n\n   useEffect(() => {\n    setCurrentPage(props.list.slice(0 ,context.itemsPerPage))\n    setNumOfPages(Math.ceil(props.list.length / context.itemsPerPage))\n    \n   }, [props.list]);\n\n   useEffect(() => {\n       const start =(currentPage -1)*context.itemsPerPage;\n       const end =start + context.itemsPerPage;\n       setActiveList(props.list.slice(start,end))\n      \n   }, [currentPage]);\n   \n   const PagesList=()=>{\nconst pages=[];\nconsole.log(numOfPages);   \nfor (let index = 0; index < numOfPages; index++) {\n    pages.push(<button onClick={()=>{changePage(i)}} key={i}>{i}</button>);\n    \n}\nret\n}\n\n\n\n\n    return props.list.map(item => (\n            <div key={item.id}>\n              <p>{item.text}</p>\n              <p><small>Assigned to: {item.assignee}</small></p>\n              <p><small>Difficulty: {item.difficulty}</small></p>\n              <div onClick={() => props.toggleComplete(item.id)}>Complete: {item.complete.toString()}</div>\n              <hr />\n            </div>\n          ))\n    \n\n}\nexport default List;"]},"metadata":{},"sourceType":"module"}