{"ast":null,"code":"var _jsxFileName = \"/home/dana/my401/class31/todo-app/src/components/todo/todo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useForm from '../../hooks/form.js';\nimport Header from './header';\nimport { v4 as uuid } from 'uuid';\nimport List from './list.js';\nimport Form from './form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ToDo = () => {\n  _s();\n\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const {\n    handleChange,\n    handleSubmit\n  } = useForm(addItem);\n\n  function addItem(item) {\n    const data = {\n      id: uuid()\n    };\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter(item => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = list.map(item => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n\n      return item;\n    });\n    setList(items);\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      incomplete: incomplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      handleChange: handleChange,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      list: list,\n      toggleComplete: toggleComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ToDo, \"KGnI4uRsfdxDMA58OT2wFkFYU3Q=\", false, function () {\n  return [useForm];\n});\n\n_c = ToDo;\nexport default ToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"sources":["/home/dana/my401/class31/todo-app/src/components/todo/todo.js"],"names":["React","useEffect","useState","useForm","Header","v4","uuid","List","Form","ToDo","list","setList","incomplete","setIncomplete","handleChange","handleSubmit","addItem","item","data","id","complete","deleteItem","items","filter","toggleComplete","map","incompleteCount","length","document","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;;AAGA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAEjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAEY,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAiCZ,OAAO,CAACa,OAAD,CAA9C;;AAEA,WAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACtB,UAAMC,IAAI,GAAC;AAACC,MAAAA,EAAE,EAACb,IAAI;AAAR,KAAX;AACCW,IAAAA,IAAI,CAACE,EAAL,GAAUb,IAAI,EAAd;AACAW,IAAAA,IAAI,CAACG,QAAL,GAAgB,KAAhB;AACAT,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUO,IAAV,CAAD,CAAP;AACD;;AAED,WAASI,UAAT,CAAoBF,EAApB,EAAwB;AACtB,UAAMG,KAAK,GAAGZ,IAAI,CAACa,MAAL,CAAaN,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYA,EAAjC,CAAd;AACAR,IAAAA,OAAO,CAACW,KAAD,CAAP;AACD;;AAED,WAASE,cAAT,CAAwBL,EAAxB,EAA4B;AAE1B,UAAMG,KAAK,GAAGZ,IAAI,CAACe,GAAL,CAAUR,IAAI,IAAI;AAC9B,UAAKA,IAAI,CAACE,EAAL,IAAWA,EAAhB,EAAqB;AACnBF,QAAAA,IAAI,CAACG,QAAL,GAAgB,CAAEH,IAAI,CAACG,QAAvB;AACD;;AACD,aAAOH,IAAP;AACD,KALa,CAAd;AAOAN,IAAAA,OAAO,CAACW,KAAD,CAAP;AAED;;AAEDrB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,eAAe,GAAGhB,IAAI,CAACa,MAAL,CAAYN,IAAI,IAAI,CAACA,IAAI,CAACG,QAA1B,EAAoCO,MAA1D;AACAd,IAAAA,aAAa,CAACa,eAAD,CAAb;AACAE,IAAAA,QAAQ,CAACC,KAAT,GAAkB,eAAcjB,UAAW,EAA3C;AACD,GAJQ,EAIN,CAACF,IAAD,CAJM,CAAT;AAMA,sBACE;AAAA,4BACC,QAAC,MAAD;AAAQ,MAAA,UAAU,EAAEE;AAApB;AAAA;AAAA;AAAA;AAAA,YADD,eAEE,QAAC,IAAD;AAAM,MAAA,YAAY,EAAEE,YAApB;AAAkC,MAAA,YAAY,EAAEC;AAAhD;AAAA;AAAA;AAAA;AAAA,YAFF,eAIC,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEL,IAAZ;AAAkB,MAAA,cAAc,EAAEc;AAAlC;AAAA;AAAA;AAAA;AAAA,YAJD;AAAA,kBADF;AASD,CA9CD;;GAAMf,I;UAImCN,O;;;KAJnCM,I;AAgDN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport useForm from '../../hooks/form.js';\nimport Header from './header';\nimport { v4 as uuid } from 'uuid';\nimport List from './list.js';\nimport Form from './form';\n\n\nconst ToDo = () => {\n\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem);\n\n  function addItem(item) {\n   const data={id:uuid(),}\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter( item => item.id !== id );\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n\n    const items = list.map( item => {\n      if ( item.id == id ) {\n        item.complete = ! item.complete;\n      }\n      return item;\n    });\n\n    setList(items);\n\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n\n  return (\n    <>\n     <Header incomplete={incomplete}/>\n      <Form handleChange={handleChange} handleSubmit={handleSubmit}/>\n\n     <List list={list} toggleComplete={toggleComplete} />\n\n    </>\n  );\n};\n\nexport default ToDo;\n"]},"metadata":{},"sourceType":"module"}