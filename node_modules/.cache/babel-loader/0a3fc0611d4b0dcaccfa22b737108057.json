{"ast":null,"code":"var _jsxFileName = \"/home/dana/my401/class31/todo-app/src/components/list.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { When } from 'react-if';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Toast from 'react-bootstrap/Toast';\nimport Badge from 'react-bootstrap/Badge';\nimport Card from 'react-bootstrap/Card';\nimport useHook from '../hooks/formHooks.js';\nimport { FormControl } from 'react-bootstrap';\nimport { SettingsContext } from '../context/setting.js';\nimport Pagination from './pagination.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ToDoList(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const settingsContext = useContext(SettingsContext);\n  const [value, setValue] = useState('');\n  const [id, setId] = useState('');\n  const [update, setUpdate] = useState(false);\n  const [handleSubmit, values] = useHook(updateList);\n  const [complete, setComplete] = useState('');\n  const [currentPage, setCurrentPage] = useState('1');\n\n  const toggleUpdate = id => {\n    setUpdate(!update);\n    setId(id);\n  };\n\n  function updateList(todo) {\n    setValue(todo);\n    props.updateItem(id, value);\n  }\n\n  let activeLest = props.list;\n\n  if (settingsContext.hideComplete) {\n    activeLest = props.list.filter(item => !item.complete);\n  }\n\n  const indexOfLastItem = currentPage * settingsContext.itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - settingsContext.itemsPerPage;\n  activeLest = activeLest.slice(indexOfFirstItem, indexOfLastItem);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  function SettingForm() {\n    _s();\n\n    const settingsContext = useContext(SettingsContext);\n    const [items, setItems] = useState(settingsContext.itemsPerPage);\n\n    const handleItems = e => {\n      e.preventDefault();\n      settingsContext.setItemPerPage(Number(e.target.items.value));\n      localStorage.setItem(\"ItemPerPage\", Number(e.target.items.value));\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"listGroup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settings\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            id: \"hideButton\",\n            variant: settingsContext.hideComplete === true ? 'success' : 'secondary',\n            onClick: () => settingsContext.setHideComplete(!settingsContext.hideComplete),\n            children: settingsContext.hideComplete === true ? `Show Completed Tasks` : `Hide Completed Tasks`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"sortDropDown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(When, {\n          condition: update === true,\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              placeholder: \"update task\",\n              onChange: e => setValue(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: e => {\n                handleSubmit(e);\n                toggleUpdate(id);\n              },\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this), activeLest.map(item => /*#__PURE__*/_jsxDEV(Card, {\n          id: \"listItem\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            children: [/*#__PURE__*/_jsxDEV(Badge, {\n              pill: true,\n              variant: item.complete === true ? 'danger' : 'success',\n              className: \"m-3\",\n              onClick: () => props.toggleComplete(item._id),\n              children: item.complete === true ? `Complete` : `Pending`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mr-auto\",\n              children: item.assignee\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"light\",\n              type: \"submit\",\n              onClick: () => props.deleteItem(item._id),\n              className: \"float-right text-secondary font-weight-bold\",\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            id: \"cardBody\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n              id: \"taskText\",\n              className: `complete-${item.complete.toString()}`,\n              onClick: () => toggleUpdate(item._id),\n              children: item.text\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              id: \"diff\",\n              className: \"text-sm-right\",\n              children: [\"Difficulty: \", item.difficulty]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settingsBottom\",\n          children: [/*#__PURE__*/_jsxDEV(Pagination, {\n            itemsPerPage: settingsContext.itemsPerPage,\n            totalItems: props.list.length,\n            paginate: paginate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"totalDisplay\",\n            children: [props.list.length, \" total items\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"selectPerPage\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              id: \"perPagelabel\",\n              htmlFor: \"perPage\",\n              children: \"Items Displayed Per Page:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"perPageSelect\",\n              name: \"perPage\",\n              onChange: e => settingsContext.setItemPerPage(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"3\",\n                children: \"3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"4\",\n                children: \"4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"5\",\n                children: \"5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: props.list.length,\n                children: \"ALL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n\n  _s(SettingForm, \"4tLC96jCXSYTr/Fyws2CHwFCwFQ=\");\n}\n\n_s2(ToDoList, \"jcPKSrrPECsHdG/8eu6e3tkODpk=\", false, function () {\n  return [useHook];\n});\n\n_c = ToDoList;\nexport default ToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"sources":["/home/dana/my401/class31/todo-app/src/components/list.js"],"names":["React","useEffect","useState","useContext","When","ListGroup","Button","Form","Toast","Badge","Card","useHook","FormControl","SettingsContext","Pagination","ToDoList","props","settingsContext","value","setValue","id","setId","update","setUpdate","handleSubmit","values","updateList","complete","setComplete","currentPage","setCurrentPage","toggleUpdate","todo","updateItem","activeLest","list","hideComplete","filter","item","indexOfLastItem","itemsPerPage","indexOfFirstItem","slice","paginate","pageNumber","SettingForm","items","setItems","handleItems","e","preventDefault","setItemPerPage","Number","target","localStorage","setItem","setHideComplete","map","toggleComplete","_id","assignee","deleteItem","toString","text","difficulty","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { When } from 'react-if';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Toast from 'react-bootstrap/Toast';\nimport Badge from 'react-bootstrap/Badge';\nimport Card from 'react-bootstrap/Card';\nimport useHook from '../hooks/formHooks.js';\nimport { FormControl } from 'react-bootstrap';\nimport { SettingsContext } from '../context/setting.js';\nimport Pagination from './pagination.js';\n\n\n\nfunction ToDoList(props) {\n  const settingsContext = useContext(SettingsContext);\n  const [value, setValue] = useState('');\n  const [id, setId] = useState('');\n  const [update, setUpdate] = useState(false);\n  const [handleSubmit, values] = useHook(updateList);\n  const [complete, setComplete] = useState('');\n  const [currentPage, setCurrentPage] = useState('1');\n\n  const toggleUpdate = (id) => {\n    setUpdate(!update);\n    setId(id);\n  }\n\n  function updateList(todo) {\n    setValue(todo); \n    props.updateItem(id, value)\n  }\n\n  let activeLest = props.list;\n\n\n\n\n  if (settingsContext.hideComplete) {\n    activeLest = props.list.filter(item => !item.complete);\n  }\n\n\n  const indexOfLastItem = currentPage * settingsContext.itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - settingsContext.itemsPerPage;\n  activeLest = activeLest.slice(indexOfFirstItem, indexOfLastItem); \n\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\nfunction SettingForm() {\n  const settingsContext = useContext(SettingsContext);\n  const [items, setItems] = useState(settingsContext.itemsPerPage);\n\n  const handleItems = (e) => {\n    e.preventDefault();\n\n    settingsContext.setItemPerPage(Number(e.target.items.value));\n    localStorage.setItem(\"ItemPerPage\" , Number(e.target.items.value))\n  };\n\n  return (\n    <>\n      <div id=\"listGroup\">\n        <div id=\"settings\">\n          <Button\n            id=\"hideButton\"\n            variant={settingsContext.hideComplete === true ? 'success' : 'secondary'}\n            onClick={() => settingsContext.setHideComplete(!settingsContext.hideComplete)}>\n              {settingsContext.hideComplete === true ? `Show Completed Tasks` : `Hide Completed Tasks`}\n          </Button>\n          <div id=\"sortDropDown\">\n           \n         \n          </div>\n        </div>\n        <When condition={update === true}>\n          <Form>\n            <FormControl placeholder=\"update task\" onChange={(e) => setValue(e.target.value)} />\n            <Button onClick={(e) => {handleSubmit(e); toggleUpdate(id);}}>Submit</Button>\n          </Form>\n        </When>\n        {activeLest.map(item => (\n          <Card id=\"listItem\">\n            <Card.Header>\n              <Badge\n                pill \n                variant={item.complete === true ? 'danger' : 'success'}\n                className=\"m-3\"\n                onClick={() => props.toggleComplete(item._id)}\n                >\n                {item.complete === true ? `Complete` : `Pending`}\n              </Badge>\n              <span className=\"mr-auto\">{item.assignee}</span>\n              <Button \n                variant=\"light\" \n                type=\"submit\" \n                onClick={() => props.deleteItem(item._id)}\n                className=\"float-right text-secondary font-weight-bold\"\n                >\n                  X\n                </Button>\n            </Card.Header>\n            <Card.Body id=\"cardBody\">\n              <Card.Text\n              id=\"taskText\"\n              className={`complete-${item.complete.toString()}`}\n              key={item.id}\n              onClick={() => toggleUpdate(item._id)}\n              >\n                {item.text}\n              </Card.Text>\n              <Card.Text id=\"diff\" className=\"text-sm-right\">\n                Difficulty: {item.difficulty}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        ))}\n        <div id=\"settingsBottom\">\n          <Pagination itemsPerPage={settingsContext.itemsPerPage} totalItems={props.list.length} paginate={paginate}/>\n          <p id=\"totalDisplay\">{props.list.length} total items</p>\n          <div id=\"selectPerPage\">\n            <label id=\"perPagelabel\" htmlFor=\"perPage\">Items Displayed Per Page:</label>\n            <select id=\"perPageSelect\" name=\"perPage\" onChange={e => settingsContext.setItemPerPage(e.target.value)}>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n              <option value={props.list.length}>ALL</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}}\n\nexport default ToDoList;\n"]},"metadata":{},"sourceType":"module"}