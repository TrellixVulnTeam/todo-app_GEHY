{"ast":null,"code":"var _jsxFileName = \"/home/dana/my401/class31/todo-app/src/components/list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { When } from 'react-if';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Toast from 'react-bootstrap/Toast';\nimport Badge from 'react-bootstrap/Badge';\nimport Card from 'react-bootstrap/Card';\nimport useHook from '../hooks/formHooks.js';\nimport { FormControl } from 'react-bootstrap';\nimport { SettingsContext } from '../context/setting.js';\nimport Pagination from './pagination.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ToDoList(props) {\n  _s();\n\n  const settingsContext = useContext(SettingsContext);\n  const [value, setValue] = useState('');\n  const [id, setId] = useState('');\n  const [update, setUpdate] = useState(false);\n  const [handleSubmit, values] = useHook(updateList);\n  const [complete, setComplete] = useState('');\n  const [currentPage, setCurrentPage] = useState('1');\n\n  const toggleUpdate = id => {\n    setUpdate(!update);\n    setId(id);\n  };\n\n  function updateList(todo) {\n    setValue(todo);\n    props.updateItem(id, value);\n  }\n\n  let currentList = props.list;\n\n  if (settingsContext.hideComplete) {\n    currentList = props.list.filter(item => !item.complete);\n  }\n\n  const indexOfLastItem = currentPage * settingsContext.itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - settingsContext.itemsPerPage;\n  currentList = currentList.slice(indexOfFirstItem, indexOfLastItem);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"listGroup\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"settings\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          id: \"hideButton\",\n          variant: settingsContext.hideComplete === true ? 'success' : 'secondary',\n          onClick: () => settingsContext.setHideComplete(!settingsContext.hideComplete),\n          children: settingsContext.hideComplete === true ? `Show Completed Tasks` : `Hide Completed Tasks`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"sortDropDown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(When, {\n        condition: update === true,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            placeholder: \"update task\",\n            onChange: e => setValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: e => {\n              handleSubmit(e);\n              toggleUpdate(id);\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), currentList.map(item => /*#__PURE__*/_jsxDEV(Card, {\n        id: \"listItem\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          children: [/*#__PURE__*/_jsxDEV(Badge, {\n            pill: true,\n            variant: item.complete === true ? 'danger' : 'success',\n            className: \"m-3\",\n            onClick: () => props.toggleComplete(item._id),\n            children: item.complete === true ? `Complete` : `Pending`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mr-auto\",\n            children: item.assignee\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"light\",\n            type: \"submit\",\n            onClick: () => props.deleteItem(item._id),\n            className: \"float-right text-secondary font-weight-bold\",\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          id: \"cardBody\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n            id: \"taskText\",\n            className: `complete-${item.complete.toString()}`,\n            onClick: () => toggleUpdate(item._id),\n            children: item.text\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            id: \"diff\",\n            className: \"text-sm-right\",\n            children: [\"Difficulty: \", item.difficulty]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"settingsBottom\",\n        children: [/*#__PURE__*/_jsxDEV(Pagination, {\n          itemsPerPage: settingsContext.itemsPerPage,\n          totalItems: props.list.length,\n          paginate: paginate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"totalDisplay\",\n          children: [props.list.length, \" total items\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"selectPerPage\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            id: \"perPagelabel\",\n            htmlFor: \"perPage\",\n            children: \"Items Displayed Per Page:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"perPageSelect\",\n            name: \"perPage\",\n            onChange: e => settingsContext.setItemPerPage(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"3\",\n              children: \"3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"4\",\n              children: \"4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"5\",\n              children: \"5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: props.list.length,\n              children: \"ALL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ToDoList, \"jcPKSrrPECsHdG/8eu6e3tkODpk=\", false, function () {\n  return [useHook];\n});\n\n_c = ToDoList;\nexport default ToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"sources":["/home/dana/my401/class31/todo-app/src/components/list.js"],"names":["React","useEffect","useState","useContext","When","ListGroup","Button","Form","Toast","Badge","Card","useHook","FormControl","SettingsContext","Pagination","ToDoList","props","settingsContext","value","setValue","id","setId","update","setUpdate","handleSubmit","values","updateList","complete","setComplete","currentPage","setCurrentPage","toggleUpdate","todo","updateItem","currentList","list","hideComplete","filter","item","indexOfLastItem","itemsPerPage","indexOfFirstItem","slice","paginate","pageNumber","setHideComplete","e","target","map","toggleComplete","_id","assignee","deleteItem","toString","text","difficulty","length","setItemPerPage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { When } from 'react-if';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Toast from 'react-bootstrap/Toast';\nimport Badge from 'react-bootstrap/Badge';\nimport Card from 'react-bootstrap/Card';\nimport useHook from '../hooks/formHooks.js';\nimport { FormControl } from 'react-bootstrap';\nimport { SettingsContext } from '../context/setting.js';\nimport Pagination from './pagination.js';\n\n\n\nfunction ToDoList(props) {\n  const settingsContext = useContext(SettingsContext);\n\n  const [value, setValue] = useState('');\n  const [id, setId] = useState('');\n  const [update, setUpdate] = useState(false);\n  const [handleSubmit, values] = useHook(updateList);\n  const [complete, setComplete] = useState('');\n  const [currentPage, setCurrentPage] = useState('1');\n\n  const toggleUpdate = (id) => {\n    setUpdate(!update);\n    setId(id);\n  }\n\n  function updateList(todo) {\n    setValue(todo); \n    props.updateItem(id, value)\n  }\n\n  let currentList = props.list;\n\n\n\n\n  if (settingsContext.hideComplete) {\n    currentList = props.list.filter(item => !item.complete);\n  }\n\n\n  const indexOfLastItem = currentPage * settingsContext.itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - settingsContext.itemsPerPage;\n  currentList = currentList.slice(indexOfFirstItem, indexOfLastItem); \n\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n\n  return (\n    <>\n      <div id=\"listGroup\">\n        <div id=\"settings\">\n          <Button\n            id=\"hideButton\"\n            variant={settingsContext.hideComplete === true ? 'success' : 'secondary'}\n            onClick={() => settingsContext.setHideComplete(!settingsContext.hideComplete)}>\n              {settingsContext.hideComplete === true ? `Show Completed Tasks` : `Hide Completed Tasks`}\n          </Button>\n          <div id=\"sortDropDown\">\n           \n         \n          </div>\n        </div>\n        <When condition={update === true}>\n          <Form>\n            <FormControl placeholder=\"update task\" onChange={(e) => setValue(e.target.value)} />\n            <Button onClick={(e) => {handleSubmit(e); toggleUpdate(id);}}>Submit</Button>\n          </Form>\n        </When>\n        {currentList.map(item => (\n          <Card id=\"listItem\">\n            <Card.Header>\n              <Badge\n                pill \n                variant={item.complete === true ? 'danger' : 'success'}\n                className=\"m-3\"\n                onClick={() => props.toggleComplete(item._id)}\n                >\n                {item.complete === true ? `Complete` : `Pending`}\n              </Badge>\n              <span className=\"mr-auto\">{item.assignee}</span>\n              <Button \n                variant=\"light\" \n                type=\"submit\" \n                onClick={() => props.deleteItem(item._id)}\n                className=\"float-right text-secondary font-weight-bold\"\n                >\n                  X\n                </Button>\n            </Card.Header>\n            <Card.Body id=\"cardBody\">\n              <Card.Text\n              id=\"taskText\"\n              className={`complete-${item.complete.toString()}`}\n              key={item.id}\n              onClick={() => toggleUpdate(item._id)}\n              >\n                {item.text}\n              </Card.Text>\n              <Card.Text id=\"diff\" className=\"text-sm-right\">\n                Difficulty: {item.difficulty}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        ))}\n        <div id=\"settingsBottom\">\n          <Pagination itemsPerPage={settingsContext.itemsPerPage} totalItems={props.list.length} paginate={paginate}/>\n          <p id=\"totalDisplay\">{props.list.length} total items</p>\n          <div id=\"selectPerPage\">\n            <label id=\"perPagelabel\" htmlFor=\"perPage\">Items Displayed Per Page:</label>\n            <select id=\"perPageSelect\" name=\"perPage\" onChange={e => settingsContext.setItemPerPage(e.target.value)}>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n              <option value={props.list.length}>ALL</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default ToDoList;\n"]},"metadata":{},"sourceType":"module"}